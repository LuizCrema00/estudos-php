A seguranca é um aspecto crucial no desenvolvimento de aplicacoes PHP, pois um código mal escrito pode deixar o sistema vulneraavel a ataques como injecao de SQL,
Cross-Site Scripting (XSS), e outros. Aqui estao algumas práticas essenciais para garantir a seguranca no desenvolvimento PHP.

1. Prepared Statements

Prepared Statements sao uma maneira segura de executar consultas SQL, protegendo contra ataques de injecao SQL. Ao usar prepared Statements, voce separa a lógica da consulta
dos dados que sao passados para ela, evitando que entradas maliciosas alterem a consulta.

Exemplo:

// Conectar ao banco de dados
$pdo = new PDO('mysql:host=localhost;dbname=meu_banco', 'usuario', 'senha');

// Preparar a consulta
$sql = 'SELECT * FROM usuarios WHERE email = :email';
$stmt = $pdo->prepare($sql);

// Vincular o parâmetro
$stmt->bindParam(':email', $email);

// Executar a consulta
$email = 'exemplo@dominio.com';
$stmt->execute();

// Recuperar os resultados
$result = $stmt->fetchAll();

2. Sanitizacao e validacao
Sanitizacao e validacao sao processos complementares para garantir que os dados de entrada sejam seguros e válidos.
- Sanitizacao: Remove ou modifica caracteres indesejados.
- Validacao: Verifica se os dados atendem a certos critérios.

Exemplo de sanitizacao:
$email = filter_var($_POST['email'], FILTER_SANITIZE_EMAIL);

Exemplo de validacao:
if (filter_var($email, FILTER_VALIDATE_EMAIL) === false) {
    echo "Email inválido.";
}

3. Acesso Restrito aos arquivos e diretórios
Configurar o servidor web para que apenas os arquivos necessarios sejam acessiveis pelo público. Outras pastas, como aquelas que contem scripts de configuracao
ou dados sensiveis, devem ser inacessiveis.

4. Hashing e Encriptacao
Hashing e encriptacao sao duas tecnicas diferentes utilizadas para proteger dados, mas servem a propósitos distintos e funcionam de maneiras diferentes.

Hashing:
    1- Definicao: Hashing é o processo de transformar uma entrada (ou "mensagem") em uma saída de tamanho fixo
    2- Propósito: O principal objetivo do hasing é verificar a integridade dos dados e armazenar senhas de maneira segura.
    3- Funcao: As funcoes de hashing sao unidirecionais, ou seja, nao é possível reverter o hash para obter a entrada original.
    4- Uso comum: Armazenamento seguro de senhas, verificacao de integridade de dados, assinaturas digitais.
    5- Exemplos de algoritmos: MD5, bcrypt, argon2.

Encriptacao:
    1- Definicao: Encriptacao é o processo de transformar dados legíveis (plaintext) em dados ilegíveis (ciphertext) usando um algoritmo e uma chave de encriptacao.
    Os dados podem ser revertidos para o estado original (decriptados) usando uma chave de decriptacao.
    2- Propósito: O principal objetivo da decriptacao é proteger a confidencialidade dos dados, tornando-os ilegíveis para qualquer pessoa que nao possua a chave de decriptacao.
    3- Funcao: A encriptacao é bidirecional, ou seja, os dados podem ser encriptados e depois decriptados de volta ao seu estado original.
    4- Uso comum: Comunicacao segura(por exemplo, HTTPS, e-mails ecriptados), protecao de dados em Armazenamento
    5- Exemplos de algoritmos: Simétricos: AES, DES, 3DES, Blowfish. Asimetricos: RSA, ECC(Criptografia de Cruva Elíptica).

    Aplicacao Prática no PHP

    Hashing de senhas
    O PHP fornece funcoes embutidas para hashing de senhas, como 'password_hash()' e 'password_verify()'.

    // Hashing uma senha
    $password = "minhaSenhaSecreta";
    $hash = password_hash($password, PASSWORD_DEFAULT);

    // Verificando a senha
    if (password_verify($password, $hash)) {
        echo "Senha correta!";
    } else {
        echo "Senha incorreta!";
    }

    Encriptacao 
    PHP oferece funções para encriptação e decriptação usando a extensão openssl.

    $data = "dados secretos";
    $method = 'aes-256-cbc';
    $key = 'chave-secreta';
    $iv = openssl_random_pseudo_bytes(openssl_cipher_iv_length($method));

    // Encriptando os dados
    $encrypted = openssl_encrypt($data, $method, $key, 0, $iv);

    // Decriptando os dados
    $decrypted = openssl_decrypt($encrypted, $method, $key, 0, $iv);




