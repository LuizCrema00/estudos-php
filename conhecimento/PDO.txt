O PDO (PHP Data Objects) é um extensao do PHP que fornece uma interface consistente para acessar diferentes bancos de dados.
Com PDO, podemos usar o mesmo conjunto de funcoes para interagir com diversos sistemas de gerenciamento de banco de dados (SGDBs)
Como mysql ,postgresql, sqlite, Oracle, entre outros. 

Conectando ao banco de dados:
Para usar PDO, devemos primeiro criar uma instancia da classe 'PDO', fornecendo as informacoes de conexao ao banco de dados.

<?php

$dsn = 'mysql:host=localhost;dbname=nome_do_banco';
$usuario = 'seu_usuario';
$senha = 'sua_senha';

try {
    $pdo = new PDO($dsn, $usuario, $senha);
    // Configura o PDO para lançar exceções em caso de erro
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    echo "Conexão bem-sucedida!";
} catch (PDOException $e) {
    echo "Erro ao conectar ao banco de dados: " . $e->getMessage();
}

Executando consultas simples:
Podemos executar consultas diretamente usando o método 'query' para SELECTs ou 'exec' para INSERTs, UPDATEs, DELETEs.
<?php

// Consulta simples
$sql = 'SELECT * FROM tabela';
foreach ($pdo->query($sql) as $row) {
    print_r($row);
}

// Execução de comando
$sql = "INSERT INTO tabela (coluna1, coluna2) VALUES ('valor1', 'valor2')";
$pdo->exec($sql);

O método 'exec' é usado para executar instrucoes SQL que nao retornam um conjunto de resultados. Eles retornam o número de linhas afetadas pela instrucao SQL.
O método 'query' é usado para executar instrucoes SQL que retornam um conjunto de resultados. Ele retorna um objeto 'PDOStatement', que pode ser usado para iterar sobre os resultados.
O método 'fetchAll' é usado para recuperar todos os resultados de um objeto 'PDOStatement' em um array. Ele pode ser usado para obter os dados em diferentes formatos, como arrays associativos
arrays numéricos, ou objetos.

Fetch Modes:
Ao tentar buscar dados do banco de dados, podemos informar como queremos que os métodos do PDO formatem essas dados. Os principais fetch modes ou fetch styles sao:
PDO::FETCH_ASSOC: Retorna cada linha como um array associativo, onde a chave é o nome da coluna, e o valor é o valor da coluna em sí.

PDO::FETCH_BOTH: (esse é o padrao), Retorna cada linha como um array com as chaves sendo tanto o índice da coluna (comecando com 0) quanto o nome da coluna, ou seja, os valores acabam 
ficando duplicados nesse formato.

PDO::FETCH_CLASS: Cada linha do resultado é retornado como uma instancia da classe especificada em outro parametro. A classe nao pode ter paramentros no construtor (ou o nome da coluna no banco de dados
e o nome do atributo no objeto devem ser os mesmos)  e cada coluna terá seu valor atribuido a uma propriedade de mesmo nome no objeto criado.

Para ver os demais modos de busca podemos consultar a documentacao: https://www.php.net/manual/en/pdostatement.fetch#refsect1-pdostatement.fetch-parameters

O método fetch retorna uma única linha, diferentemente do método fetchAll, qu retorna todas as linhas do SELECT. Em um cenario que pode ser interessante usar o fetch ao invés
de fetchAll, seria para buscar uma linha por vez, poupando memória se tivermos muitas linhas sendo trazidas e tentarmos executar o fetchAll, iremos colocar todas as linhas em memória de uma vez só. 
Isso pode trazer problemas. Utilizando o fetch dentro de um while, pode nos permitir buscar todos os resultados, mas colocando um de cada vez na memória.

Prepared Statements:
Prepared Statements (declaracoes preparadas) sao uma maneira segura e eficiente de executar instrucoes SQL com paramentros em PDO. Eles ajudam a prevenir ataques de SQL injection e melhoram o desempenho
das consultas, especialemte quando a mesma instrucao SQL é executada múltiplas vezes com diferentes parametros.

Beneficios dos prepared Statements
1. Seguranca: Previne SQL Injection, pois os parametros sao tratados de forma segura pelo driver do banco de dados.
2. Desempenho: Permite que o banco de dados prepare (analise, compile, e optimize) a instrucao SQL uuma vez e execute múltiplas vezes com diferentes valores de parametros.
3. Clareza: O código é mais claro e mais facil de ler, pois os parametros sao vinculados a instrucao SQL de forma explicita.

Resumo
1. Preparar a instrucao: 'prepare($sql)'
2. Vincular parametros: 'bindParam($posicao, $valor)' ou 'bindValue($posicao, $valor)'
3. Executar a instrucao: 'execute([$parametros])'

A diferenca principal entre 'bindValue' e 'bindParam' em PDO está na maneira como os valores sao vinculados aos placeholders na instrucao SQL.

'bindValue':
- Vincula um valor diretamente ao placeholder na instrucao SQL.
- Momento da vinculacao: O valor é vinculado imediatamente quando 'bindValue' é chamado.
- Uso típico: Quando voce tem um valor estático ou uma expressao que nao precisa mudar.

$stmt = $pdo->prepare("INSERT INTO tabela (coluna1, coluna2) VALUES (:coluna1, :coluna2)");
$stmt->bindValue(':coluna1', 'valor1'); // Valor 'valor1' é vinculado imediatamente
$stmt->bindValue(':coluna2', 123);
$stmt->execute();

'bindParam':
- Vincula uma variavel ao placeholder na instrucao SQL.
- A variavel é vinculada por referencia, o que significa que o valor é avaliado no momento da execucao da instrucao SQL.
- Uso típico: Quando voce espera que o valor da variavel possa mudar antes da execucao da instrucao SQL.

$stmt = $pdo->prepare("INSERT INTO tabela (coluna1, coluna2) VALUES (:coluna1, :coluna2)");
$valor1 = 'valor1';
$valor2 = 123;
$stmt->bindParam(':coluna1', $valor1); // Variável $valor1 é vinculada por referência
$stmt->bindParam(':coluna2', $valor2);
$valor1 = 'novoValor'; // Valor da variável pode mudar antes da execução
$stmt->execute(); // Aqui, o valor atualizado de $valor1 é usado
