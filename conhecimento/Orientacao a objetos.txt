Programacao procedural: nós temos funcoes que recebem os dados que elas manipularao por parametro, 
mas esses dados podem ser manipulados em qualquer lugar. 
Essa separacao facilita a tomada de más decisoes e dificulta a manutencao do código em grandes projetos.

Orientacao a Objetos:
A ideia da Orientacao a objetos é organizar nossos códigos nao mais em funcoes, mas sim em tipos que fazem
sentido em nosso sistema através da definicao de classes e instancias de objetos;

Pilares da Orientacao a Objetos

1- Abstracao: Abstracao é focar naquilo que será efetivamente útil e necessario para desenvolver 
o sistema onde trabalhamos para evitar desperdício e aumento de complexidade.

2- Encapsulamento: O encapsulamento ajuda a garantir que os nossos objetos se mantenham em um estado consistente, 
e também facilita o uso da nossa classe por outros desenvolvedores. Quando criamos um método que nos dá a nota média do filme,
por exemplo, garantimos que os demais desenvolvedores do projeto nao precisao se preocupar em como calcular essa informacao. 
E se for necessario alterar esse cálculo no futuro, temos a certeza de que só precisaremos alterar em um único lugar.

A palavra reservada this indica o objeto utilizado para executar a funcao, ela contem a referencia para o objeto que gerou a execucao do método.

O modificador private é usado para controlar o acesso aos membros de uma classe.

Método Construtor: é um método que é chamado automaticamente sempre que um objeto é instanciado. O método construtor é também conhecido com um dos métodos mágicos do PHP

Métodos mágicos: sao métodos que podemos definir em nosso código e sao acionados automaticamente pelo PHP em situacoes especificas. 

Enum: é um tipo que permite enumerar um conjunto de valores possíveis.

Static: As propriedades estáticas são variáveis que pertencem à classe e não a uma instância específica da classe. Elas podem ser acessadas diretamente através da classe.

3- Heranca: Outro pilar da Orientacao a objetos é a heranca, uma das formas de reutilizar código é fazendo uma classe estender outra, ou seja, herdar tudo que uma classe base tem
e adicionar comportamentos especificos.

Protected: Ao usar Heranca no PHP, temos a possibilidade de utilizar o modificador de acesso protected, que permite que os atributos de uma classe sejam acessados por suas subclasses, ou seja
classes que a estendam. O modificador protected é util em situacoes em que uma classe precisa permitir que suas subclasses acessem diretamente seus atributos, sem a necessidade de restringir
o acesso apenas pelos métodos getters e setters.

4- Polimorfismo: O Polimorfismo se refere a capacidade de objetos de diferentes classes serem tratados de maneira uniforme através de uma interface comum.
Isso permite que diferentes tipos de objetos respondam de maneira diferente a uma mesma mensagem ou método, de acordo com sua implementacao especifica.
No exemplo da aula, tanto objetos do tipo Serie quanto objetos do tipo Filme podem ser tratados de maneira uniforme como um Titulo, que prove uma interface comum
como os métodos media() e duracaoEmMinutos(). Eles puderam responder de maneira diferente a mesma mensagem (a chamada do método duracaoEmMinutos) gracas a sobreescrita do método.


Classes abstratas: Classes e métodos abstratos sao conceitos fundamentais na programacao orientada a objetos (OOP) 
que ajudam a definir uma estrtura comum para uma família de classes e garantir que certas funcionalidades sejam implementadas nas classes derivadas

Uma classe abstrata é uma classe que nao pode ser instanciada diretamente. Seu propósito é servir como uma classe base para outras classes que derivam dela. Classes abstratas podem conter
métodos concretos (com implementacao) e métodos abstratos (sem implementacao). Quando uma classe abstrata contém métodos abstratos, as classes derivadas devem fornecer as implementacoes desses métodos.

Um método abstrato é um método declarado em uma classe abstrata que nao possui implementacao na própria classe abstrata. Em vez disso, ele apenas define a assinatura do método.
As classes derivadas sao obrigadas a implementar esses métodos.

Heranca Multipla: é o conceito de uma classe herdar mais de uma classe ao mesmo tempo. Em linguagens de programacao que suportam heranca multipla, uma classe pode ter vários superclasses,
e portanto, herdar propriedades e métodos de todas elas. No entanto, a heranca multipla pode introduzir complexidade e ambiguidades, especialmente quando as classes superclasses tem métodos
ou propriedades com os mesmos nomes. Devido a esses problemas, muitas linguagens de programacao, incluindo PHP, nao suportam heranca múltipla diretamente.

O problema do diamante: O problema do diamante é uma complicacao que pode surgir na heranca múltipla quando duas classes base A e B herdam de uma classe comum C, e uma classe D herda de
A e B. A estrutura resultante tem a forma de um diamante.
    C
   / \
  A   B
   \ /
    D

O problema ocorre quando a classe D tenta acessar um método ou propriedade definida na classe C, através de A e B. Pode haver ambiguidade se C,A e B redefinirem métodos ou propriedades de maneira diferente.
Isso pode levar a questoes sobre qual versao do método ou propriedade deve ser usada.

Interfaces em PHP: PHP nao suporta heranca múltipla diretamente para evitar problemas como o problema do diamante. No entanto, PHP oferece uma menira de contornar algumas das limitacoes 
da heranca única através do uso de interfaces e traits.

Interfaces definem um contrato que uma classe deve serguir. A interface declara métodos que devem ser implementados por qualquer classe que "implementa" a interface.
Interfaces permitem que classes diferentes implementem a mesma colecao de métodos, garantindo que elas sigam um padrao específico.

traits: PHP tambem oferece traits como uma forma de reutilizar métodos em várias classes. Traits permitem que voce defina métodos que podem ser usados em várias classes, sem as complicacoes
da heranca multipla.



